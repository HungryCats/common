" Vim with all enhancements
source $VIMRUNTIME/vimrc_example.vim

" Use the internal diff if available.
" Otherwise use the special 'diffexpr' for Windows.
if &diffopt !~# 'internal'
  set diffexpr=MyDiff()
endif
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg1 = substitute(arg1, '!', '\!', 'g')
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg2 = substitute(arg2, '!', '\!', 'g')
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let arg3 = substitute(arg3, '!', '\!', 'g')
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  let cmd = substitute(cmd, '!', '\!', 'g')
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction





inoremap jk <ESC>`^
nnoremap tt  :tabnew<CR>
nnoremap tc  :tabclose<CR>
nnoremap tn  :tabnext<CR>
nnoremap tu  :tabprev<CR>

nnoremap sv  :vsplit<CR>                      " 左右分屏
nnoremap ss  :split<CR>                       " 上下分屏
nnoremap sj  <C-W>j<CR>                       " 激活下方窗口
nnoremap sk  <C-W>k<CR>                       " 激活上方窗口
nnoremap sh  <C-W>h<CR>                       " 激活左侧窗口
nnoremap sl  <C-W>l<CR>                       " 激活右侧窗口
nnoremap <C-W>  <C-W>c<CR>                    " 关闭分屏

nnoremap - :resize -1<CR>                     " 缩减宽度
nnoremap + :resize +1<CR>                     " 增加宽度
nnoremap < :vertical resize -1<CR>            " 缩减高度
nnoremap > :vertical resize +1<CR>            " 增加高度

let mapleader = ","                    " let mapleader ="\<space>" "利用转义符“\”将前缀键设置为空格键
set scrolloff=10                              " 垂直滚动时，光标距离顶部/底部的位置（单位：行）。
set sidescrolloff=15                          " 水平滚动时，光标距离行首或行尾的位置（单位：字符）。该配置在不折行时比较有用。
set spell spelllang=en_us                     " 打开英语单词的拼写检查。

inoremap <leader>w <ESC>:w<cr>                " 使用 leader+w保存
nnoremap <leader>w :w<CR>

nmap H ^                                      " Vim行首、行尾光标移动按键映射
nmap L $
map Y y$                                      " 将大写的 Y 按键映射为 y$
noremap <silent><leader>. :nohls<CR>    " Vim 普通模式下执行 <leader> + .  取消搜索结果高亮显示
map <Enter> o<ESC>                            " 插入空白行
map rc : e $HOME\_vimrc<CR>                   " 打开配置文件
set nocompatible                              " 不与 Vi 兼容
set number                                    " 行号
set relativenumber                            " 显示光标所在的当前行的行号，其他行都为相对于该行的相对行号。

set tm=500                                    " Color
set t_Co=256                                  " 启用256色。
syntax on                                     " 打开语法高亮。自动识别代码，使用多种颜色显示。
set clipboard=unnamed                         " Clipboard 系统剪切板
set showcmd                                   " 命令模式下，在底部显示，当前键入的指令。
set mouse=a                                   " 支持使用鼠标。
set encoding=UTF-8                            " 使用 utf-8 编码。
filetype on                                   " 开启文件类型检测
filetype plugin on                            " 开启插件的支持
filetype indent on                            " 开启文件类型相应的缩进规则

set autoindent                                " 按下回车键后，下一行的缩进会自动跟上一行的缩进保持一致。
set smartindent                               " 智能缩进
set tabstop=2                                 " 按下 Tab 键时，Vim 显示的空格数。
set expandtab                                 " 由于 Tab 键在不同的编辑器缩进不一致，该设置自动将 Tab 转为空格。
set shiftwidth=2                              " 在文本上按下>>（增加一级缩进）、<<（取消一级缩进）或者==（取消全部缩进）时，每一级的字符数
set incsearch                                 " 实时搜索
set ignorecase                                " 搜索时忽略大小写。
set smartcase                                 " 如果同时打开了ignorecase，那么对于只有一个大写字母的搜索词，将大小写敏感；其他情况都是大小写不敏感。比如，搜索Test时，将不匹配test；搜索test时，将匹配Test。
set backspace=2                               " Make backspace work

" Vim can highlight whitespaces for you in a convenient way:
set list
set listchars=tab:>_,trail:.,extends:#,nbsp:.

set cursorline                                " 光标所在的当前行高亮
set hlsearch                                  " 搜索时，高亮显示匹配结果。
set textwidth=80                              " 设置行宽，即一行显示多少个字符。

" 关闭自动折行
set nowrap
nnoremap <leader>z :set wrap! wrap?<CR>

set ruler                                     " 在状态栏显示光标的当前位置（位于哪一行哪一列）。
set noswapfile                                " 不创建交换文件。交换文件主要用于系统崩溃时恢复文件，文件名的开头是.、结尾是.swp。
set noundofile                                " 不保留撤销历史。
set novisualbell                              "关掉可视化响铃警报
set noerrorbells                              "关掉错误警报
set visualbell t_vb=                          "关掉警报
au GuiEnter * set t_vb=
set history=1000                              " Vim 需要记住多少次历史操作。

" 命令模式下，底部操作指令按下 Tab 键自动补全。
set wildmenu
set wildmode=longest:list,full

set showmode                                  " 显示当前vim模式
set showmatch                                 " 显示匹配的括号
set matchtime=1                               " 设置showmatch的效果时间，默认500ms，现在是100ms

" vim图形化界面
set guioptions=                               "去掉两边的scrollbar
set guifont=Hack_Nerd_Font_Mono:h20           "设置字体和字的大小

nnoremap <C-v> :call VE()<CR>

" 开始
call plug#begin('~/.vim/plugged')

" 语法高亮
Plug 'sheerun/vim-polyglot'

" 用来提供一个导航目录的侧边栏
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'

" 自动补全括号的插件
Plug 'jiangmiao/auto-pairs'

" 多光标 ctrl + n
Plug 'mg979/vim-visual-multi', {'branch': 'master'}

" 复制高亮
Plug 'machakann/vim-highlightedyank'
let g:highlightedyank_highlight_duration = 200

" 替换
Plug 'vim-scripts/ReplaceWithRegister'
nmap rs <Plug>ReplaceWithRegisterLine
xmap rs  <Plug>ReplaceWithRegisterVisual

" 主题
Plug 'joshdick/onedark.vim'
if (has("termguicolors"))
 set termguicolors
endif
let g:lightline = { 'colorscheme': 'onedark' }

" 代码提示
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Git插件
Plug 'tpope/vim-fugitive'

" 状态栏美化
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
set laststatus=2
let g:airline_theme='night_owl'

" EasyMotion
Plug 'easymotion/vim-easymotion'
let g:EasyMotion_smartcase = 1
nmap s <Plug>(easymotion-s)
" 行级跳转(jk)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
" 行内跳转(hl)
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><leader>l <Plug>(easymotion-lineforward)

" 使用终端
Plug 'voldikss/vim-floaterm'
"按键映射前缀: <leader>t
let g:floaterm_keymap_new = '<Leader>tw'     "新建终端。
let g:floaterm_keymap_toggle = '<Leader>tt'  "终端显隐。
let g:floaterm_keymap_prev = '<Leader>tp'    "上一个终端。
let g:floaterm_keymap_next = '<Leader>tn'    "下一个终端。
let g:floaterm_keymap_kill = '<Leader>tk'    "关掉终端。
let g:floaterm_wintype = 'float'             "浮动窗口类型。
let g:floaterm_position = 'center'           "在窗口中间显示。

" 开始屏幕
Plug 'mhinz/vim-startify'

" markdown 预览
Plug 'iamcco/markdown-preview.vim'
Plug 'tpope/vim-markdown'

" 缩进线
Plug 'yggdroot/indentline'
let g:indentLine_enabled = 1      " 使插件生效
let g:indentLine_char = '¦'       " 设置缩进线字符，也可以为 '|', '┆', '┊' 等
let g:indentLine_conceallevel = 2     " 使插件正常运行

" python
Plug 'nvie/vim-flake8'
Plug 'sirver/ultisnips'
Plug 'davidhalter/jedi-vim'
Plug 'tmhedberg/simpylfold'
let g:SimpylFold_docstring_preview = 1

" 注释插件
Plug 'tpope/vim-commentary'

" 环绕
Plug 'tpope/vim-surround'

" 语法检查
Plug 'scrooloose/syntastic'

" 模糊搜索查找器
Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" 格式化插件
Plug 'vim-autoformat/vim-autoformat'

" 使用 . 重复上次执行操作
Plug 'tpope/vim-repeat'
silent! call repeat#set("\<Plug>MyWonderfulMap", v:count)

" 彩虹括号
Plug 'luochen1990/rainbow'
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle

" 语法检查和语义错误
Plug 'w0rp/ale'

" 图标
Plug 'ryanoasis/vim-devicons'

" 代码片段
Plug 'honza/vim-snippets'

" 标签
Plug 'majutsushi/tagbar'

" 全屏
Plug 'vim-scripts/wimproved.vim'
autocmd GUIEnter * silent! WToggleClean

" 垂直水平居中当前窗口
Plug 'jmckiern/vim-venter'

" 删除尾随空格
Plug 'ntpeters/vim-better-whitespace'
" 保存文件时，文件中的所有行都将去除其尾随空格
let g:strip_whitespace_on_save = 1
" 只能更改为修改后的行
let g:strip_only_modified_lines=1
" 去除空格时去除文件末尾的白线
let g:strip_whitelines_at_eof=1
" 忽略仅包含空格的行
let g:better_whitespace_skip_empty_lines=1
" 默认情况下，在保存文件时去除空格之前，系统会要求您进行确认
let g:strip_whitespace_confirm=0

" json
Plug 'elzr/vim-json'

call plug#end()
" 结束

set background=dark
colorscheme onedark

" 格式化
noremap <F3> :Autoformat<CR>

nmap <F6> :TagbarToggle<CR>

" 全屏
nnoremap <f11> :WToggleFullscreen<CR>

nnoremap <f12>  :VenterToggle<CR>             " 垂直水平居中窗口

" 搜索
"<Leader>f在当前目录搜索文件
nnoremap <silent> <Leader>f :Files<CR>
"<Leader>b切换Buffer中的文件
nnoremap <silent> <Leader>b :Buffers<CR>
"<Leader>h在Vim打开的历史文件中搜索，相当于是在MRU中搜索，:History：命令历史查找
nnoremap <silent> <Leader>h :History<CR>

" let g:Lf_ShortcutF = '<c-p>'
" let g:Lf_ShowHidden = 1 " 设置1则显示隐藏文件. 默认值0.
" let g:Lf_PreviewInPopup = 1 " 设置成1, 预览(preview)会在弹出(popup)窗口里显示, 而不会在原来的文件所在的窗口里显示. 默认值是0.
" let g:Lf_ReverseOrder = 1 " 设置为1, 结果从下到上显示, 跟fzf/CtrlP一致, 默认是0, 从上倒下显示.
" <C-C>, <ESC> : 退出
" <C-R> : 在模糊查询和正则表达式模式间切换
" <C-F> : 在全路径搜索和名字搜索模式间切换
" <Tab> : 切换成normal模式
" <C-V>, <S-Insert> : 从剪切板里copy字符串进行查询
" <C-U> : 清除已经打出的字符
" <C-J>, <C-K> : 在结果列表中移动
" <Up>, <Down> : 从历史记录里调出上一次/下一次的输入pattern
" <2-LeftMouse> or <CR> : 打开在光标处的文件或者被选择的多个文件
" <F5>  : 刷新缓存
" <C-P> : 预览选中结果
" <C-Up> : 在预览popup窗口里滚动向上
" <C-Down> : 在预览popup窗口里滚动向下

" 进行项目树的切换
map <C-e> :NERDTreeToggle<CR>
" map <F2> :NERDTreeMirror<CR>
" 打开vim无指定文件时，自动打开项目树
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" 当所有文件都关闭时，自动关闭项目树窗格
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
"设置树的显示图标
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let NERDTreeWinSize=25                    " 设置宽度
let NERDTreeShowHidden=1                  " 项目树是否显示隐藏文件

" F8键就可以实时预览，按下F9键就可以停止预览。
" 注: 这个Markdown-preview插件是需要Vim编辑器有Python2或者3的支持的。
nmap <silent> <F8> <Plug>MarkdownPreview        " for normal mode
imap <silent> <F8> <Plug>MarkdownPreview        " for insert mode
nmap <silent> <F9> <Plug>StopMarkdownPreview    " for normal mode
imap <silent> <F9> <Plug>StopMarkdownPreview    " for insert mode

" ----- 调用python -----
" 按 F4 调用当前脚本
autocmd BufRead *.py set makeprg=python\ -c\ \"import\ py_compile,sys;\ sys.stderr=sys.stdout;\ py_compile.compile(r'%')\"
autocmd BufRead *.py set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
autocmd BufRead *.py nmap <F4> :!python %<CR>
let g:jedi#environment_path = "E:\python/python.exe"

" 分屏方式
" :split 缩写 :sp or Ctrl-w s 上下分屏
" :vsplit 缩写 :vs or Ctrl-w v 左右分屏
" :diffsplit 缩写 :diffs diff 模式打开一个分屏，后面可以加上 {filename}
"
" 窗口跳转
" Ctrl-w w 激活下一个窗口
" Ctrl-w j 激活下方窗口
" Ctrl-w k 激活上方窗口
" Ctrl-w h 激活左侧窗口
" Ctrl-w l 激活右侧窗口
"
" 屏幕缩放
" Ctrl-w = 平均窗口尺寸
" Ctrl-w + 增加高度
" Ctrl-w - 缩减高度
" Ctrl-w _ 最大高度
" Ctrl-w > 增加宽度
" Ctrl-w < 缩减宽度
" Ctrl-w | 最大宽度

" 创建标签页
" :tabnew or :tabedit 缩写 :tabe 打开新标签页
" Ctrl-w gf 在新标签页中打开当前光标所在位置的文件名
" 注意：:tabnew 和 :tabedit 后面都可以跟一个 <空格><文件名> 用以在新标签页中
" 打开指定文件，还可以在 : 后面加一个数字，指出新标签页在列表中的位置（从 0 开始）。
" 
" 切换标签页
" gt or :tabnext 缩写 :tabn 下一个标签页（最后一个会循环到第一个）
" gT or :tabprevious 缩写 :tabp 上一个标签页（第一个会循环到最后一个）
" :tabrewind 缩写 :tabr or :tabfirst 缩写 :tabfir 到第一个
" :tablast 缩写 :tabl 到最后一个标签页
"
" 关闭标签页
" :tabclose 缩写 :tabc 关闭当前标签页
" :-tabc 关闭上一个标签页
" :+tabc 关闭下一个标签页
" :tabonly 缩写 :tabo 关闭其他标签页

" F3 格式化
" F4 运行python
" F6 tags
" F8 markdown预览
" F9 markdown关闭
" F11 全屏
" F12 垂直水平居中

set noundofile
set nobackup
