" 开启行号显示
set number relativenumber

" 开启语法高亮
syntax on

" 设置缩进为4个空格
set tabstop=4
set shiftwidth=4
set expandtab

" 开启实时搜索功能
set incsearch

" 设置自动缩进
set autoindent
set smartindent

" 设置在有一个以上的窗口时启用鼠标
set mouse=a

" 开启行内匹配高亮
set hlsearch

" 设置状态行总是显示
set laststatus=2

" 设置命令行历史长度
set history=1000

" 设置撤销次数
set undolevels=1000

" 开启文件类型侦测
filetype on

" 根据侦测到的文件类型加载相应的插件和缩进
filetype plugin indent on

" 在状态行显示当前位置（行号、列号）
set ruler

" 设置在插入模式下可以使用方向键
set nocompatible

" 设置在状态行显示正在输入的命令
set showcmd
" 设置在命令行（最后一行）显示提示信息
set showmode

" 设置忽略大小写，但在输入大写字母时自动取消
set ignorecase
set smartcase

" 设置在普通模式和可视模式下，光标可以超过行尾
set virtualedit+=block

" 设置在查找时，输入的内容可以为正则表达式
set magic

" 使用空格替代制表符
set expandtab

" 设置退格键的行为
set backspace=indent,eol,start

" 字符集
set encoding=UTF-8

" 系统剪切板
set clipboard=unnamedplus

" 终端启用256颜色
set t_Co=256

" 高亮当前行
set cursorline

" 取消铃声和屏幕闪烁
set noerrorbells visualbell t_vb=

set wildmenu
set wildmode=longest:list,full

inoremap jk <ESC>`^
nnoremap tt  :tabnew<CR>
nnoremap tc  :tabclose<CR>
nnoremap tn  :tabnext<CR>
nnoremap tu  :tabprev<CR>

nnoremap sv  :vsplit<CR>                        " 左右分屏
nnoremap ss  :split<CR>                         " 上下分屏
nnoremap sj  <C-W>j<CR>                         " 激活下方窗口
nnoremap sk  <C-W>k<CR>                         " 激活上方窗口
nnoremap sh  <C-W>h<CR>                         " 激活左侧窗口
nnoremap sl  <C-W>l<CR>                         " 激活右侧窗口
nnoremap <C-W>  <C-W>c<CR>                      " 关闭分屏

nnoremap - :resize -1<CR>                       " 缩减宽度
nnoremap + :resize +1<CR>                       " 增加宽度
nnoremap < :vertical resize -1<CR>              " 缩减高度
nnoremap > :vertical resize +1<CR>              " 增加高度

nnoremap <leader>bl :buffers<CR>	" 显示缓冲区列表
nnoremap <leader>bd :bdelete<CR>	" 删除当前缓冲区

let mapleader = "\<Space>"
set scrolloff=10
set sidescrolloff=15
set spell spelllang=en_us

nnoremap <leader>w :w<CR>
inoremap <leader>w <Esc>:w<CR>
vnoremap <leader>w <Esc>:w<CR>

nnoremap <CR> o<Esc>
map rc : e $HOME\_vimrc<CR>
nnoremap <leader>z :set wrap!<CR>

" 使用上下箭头键在补全菜单中移动
inoremap <expr> <Down> pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up> pumvisible() ? "\<C-p>" : "\<Up>"

" 开始
call plug#begin('~/.vim/plugged')

Plug 'mattn/emmet-vim'
let g:user_emmet_leader_key='!'
Plug 'othree/html5.vim'
Plug 'alvan/vim-closetag'

Plug 'ap/vim-css-color'
Plug 'hail2u/vim-css3-syntax'
Plug 'JulesWang/css.vim'

Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'

Plug 'posva/vim-vue'
Plug 'posva/vim-vue'
let g:vue_disable_pre_processor = 1
Plug 'leafoftree/vim-vue-plugin'
let g:vim_vue_plugin_config = { 
  \'syntax': {
  \   'template': ['html'],
  \   'script': ['javascript'],
  \   'style': ['css'],
  \},
  \'full_syntax': [],
  \'initial_indent': [],
  \'attribute': 0,
  \'keyword': 0,
  \'foldexpr': 0,
  \'debug': 0,
  \}

Plug 'prettier/vim-prettier'
let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.jsx,*.ts,*.tsx,*.css,*.html PrettierAsync

Plug 'davidhalter/jedi-vim'
Plug 'hynek/vim-python-pep8-indent'
Plug 'nvie/vim-flake8'
let g:flake8_show_in_gutter = 1
let g:flake8_show_in_file = 1

Plug 'vim-scripts/c.vim'
Plug 'octol/vim-cpp-enhanced-highlight'

Plug 'neoclide/coc.nvim', {'branch': 'release'}
" 使得在 insert 模式下可以使用 tab 键进行补全
inoremap <expr> <TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr> <S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"
" 映射快捷键到 CocList
nmap <leader>l  <Plug>(coc-lists)
Plug 'neoclide/coc-json'
Plug 'neoclide/coc-tsserver'
Plug 'neoclide/coc-vetur'
" pip install pynvim
Plug 'neoclide/coc-snippets'
Plug 'neoclide/coc-tabnine'
" 使用 tab 键进行补全
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Git插件
Plug 'tpope/vim-fugitive'

Plug 'jiangmiao/auto-pairs'
let g:AutoPairsFlyMode = 1

Plug 'mg979/vim-visual-multi', {'branch': 'master'}

Plug 'machakann/vim-highlightedyank'
let g:highlightedyank_highlight_duration = 200

Plug 'vim-scripts/ReplaceWithRegister'
nmap rs <Plug>ReplaceWithRegisterLine
xmap rs  <Plug>ReplaceWithRegisterVisual

Plug 'tpope/vim-commentary'

Plug 'tpope/vim-surround'

Plug 'tpope/vim-repeat'

Plug 'dense-analysis/ale'
let g:ale_fix_on_save = 1	
let g:ale_fixers = {'javascript': ['eslint', 'prettier']}
highlight ALEError ctermbg=red guibg=red
highlight ALEWarning ctermbg=yellow guibg=yellow

Plug 'easymotion/vim-easymotion'
let g:EasyMotion_colorscheme = 'gray'
map <Leader><Leader> <Plug>(easymotion-prefix)
" 行级跳转(jk)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
" 行内跳转(hl)
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><leader>l <Plug>(easymotion-lineforward)

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" 设置 fzf 在 Vim 中的颜色主题
let g:fzf_colors =
\ {
\ 'fg':      ['fg', 'Normal'],
\ 'bg':      ['bg', 'Normal'],
\ 'hl':      ['fg', 'Comment'],
\ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
\ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
\ 'hl+':     ['fg', 'Statement'],
\ 'info':    ['fg', 'PreProc'],
\ 'border':  ['fg', 'Ignore'],
\ 'prompt':  ['fg', 'Conditional'],
\ 'pointer': ['fg', 'Exception'],
\ 'marker':  ['fg', 'Keyword'],
\ 'spinner': ['fg', 'Label'],
\ 'header':  ['fg', 'Comment']
\ }

" 设置 fzf 的默认命令
set rtp+=~/.fzf

" 使用 Ctrl + p 打开文件查找器
nnoremap <C-p> :Files<CR>

" 使用 Ctrl + b 在打开的缓冲区之间切换
nnoremap <C-b> :Buffers<CR>

" ----------------------------------------------
Plug 'preservim/nerdtree'
let NERDTreeAutoLocate = 1
" 设置 NERDTree 显示隐藏文件
let NERDTreeShowHidden=1
" 设置 NERDTree 自动关闭，当打开一个文件时
let NERDTreeQuitOnOpen=1
" 设置 NERDTree 的根目录为当前目录
let NERDTreeChDirMode=2
" 设置 NERDTree 的宽度为 30
let NERDTreeWinSize=30
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['vue'] = ''
function! ToggleNERDTree()
    if exists("t:NERDTreeBufName") && bufwinnr(t:NERDTreeBufName) != -1
        NERDTreeClose
    else
        let l:file = expand("%:p")
        if l:file !=# ''
            NERDTreeFind
        else
            NERDTree
        endif
    endif
endfunction

nnoremap <leader>n :call ToggleNERDTree()<CR>
autocmd FileType nerdtree nmap <buffer> i m

Plug 'ryanoasis/vim-devicons'
" set guifont=<Your Font Here>
let g:webdevicons_enable_nerdtree = 1

Plug 'Xuyuanp/nerdtree-git-plugin'

Plug 'jistr/vim-nerdtree-tabs'

Plug 'PhilRunninger/nerdtree-visual-selection'

Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1
" ----------------------------------------------

Plug 'mhinz/vim-startify'

let g:startify_custom_header = [
\ ' /\_/\\',
\ '( o.o )',
\ '> ^ <'
\ ]

let g:startify_lists = [
    \ { 'type': 'files',     'header': ['   Files'] },
    \ { 'type': 'dir',       'header': ['   MRU ' . getcwd()] },
    \ { 'type': 'bookmarks', 'header': ['   Bookmarks'] },
    \ { 'type': 'sessions',  'header': ['   Sessions'] },
    \ { 'type': 'commands',  'header': ['   Commands'] }
    \ ]

let g:startify_bookmarks = [
    \ { 'i': '~/.vimrc' },
    \ { 'c': '~/.config/nvim/init.vim' },
    \ ]

let g:startify_session_dir = '~/.vim/session'
let g:startify_session_autoload = 'yes'
let g:startify_session_delete_buffers = 'yes'

Plug 'haishanh/night-owl.vim'
if (has("termguicolors"))
 set termguicolors
endif
let g:lightline = { 'colorscheme': 'nightowl' }
let $NVIM_TUI_ENABLE_TRUE_COLOR=1

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_theme='night_owl'
let g:airline_powerline_fonts = 1
let g:airline#extensions#default#section_x = '%{line(".") . ":" . col(".")}'

Plug 'ntpeters/vim-better-whitespace'
let g:better_whitespace_enabled = 1                 "开启行末空格高亮。
let g:better_whitespace_ctermcolor = 'gray'         "行末空格高亮颜色。
let g:strip_whitespace_on_save = 1                  "保存时删除文件内所有行末空格。
let g:strip_whitespace_confirm = 0                  "关闭保存文件时删除行末空格的询问。
let g:better_whitespace_operator = ''               "取消所有默认快捷键。
let g:better_whitespace_blacklist = []              "清空黑名单，对所有文件有效。

Plug 'luochen1990/rainbow'
let g:rainbow_active = 1

Plug 'Yggdroot/indentLine'
let g:indentLine_enabled = 1

Plug 'voldikss/vim-floaterm'                   " 悬浮终端
let g:floaterm_keymap_new = '<Leader>tw'       " 新建终端。
let g:floaterm_keymap_toggle = '<Leader>tt'    " 终端显隐。
let g:floaterm_keymap_prev = '<Leader>tp'      " 上一个终端。
let g:floaterm_keymap_next = '<Leader>tn'      " 下一个终端。
let g:floaterm_keymap_kill = '<Leader>tk'      " 关掉终端。
let g:floaterm_wintype = 'float'               " 浮动窗口类型。
let g:floaterm_position = 'center'             " 在窗口中间显示。

call plug#end()
" 结束

colorscheme night-owl
set background=dark

autocmd FileType c map <F9> :w<CR>:!clang % -o %< && %<<CR>
autocmd FileType python map <F5> :w<CR>:!python %<CR>

set nobackup       " 不创建备份文件
set nowritebackup  " 不创建写入备份文件
set noswapfile     " 不创建交换文件
set noundofile     " 不创建撤销文件